#!/bin/sh

set -e
#set -x

indent() {
    sed -u 's/^/       /'
}

export_env_dir() {
  env_dir=$1
  acceptlist_regex=${2:-''}
  denylist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$acceptlist_regex" | grep -qvE "$denylist_regex" &&
      export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}

# Gather params
BUILD_DIR="$1"
CACHE_DIR="$2"
ENV_DIR="$3"

# Export env files as env vars
export_env_dir $ENV_DIR

# Formulate repo API URL
REPO_OWNER="${HEROKU_INTEGRATION_SERVICE_MESH_REPO_OWNER:-heroku}"
REPO_PROJECT="${HEROKU_INTEGRATION_SERVICE_MESH_REPO_PROJECT:-heroku-integration-service-mesh}"
if [ -z "$HEROKU_INTEGRATION_SERVICE_MESH_RELEASE_VERSION" ]; then
    API_URL="https://api.github.com/repos/${REPO_OWNER}/${REPO_PROJECT}/releases/latest"
else
    API_URL="https://api.github.com/repos/heroku/heroku-integration-service-mesh/releases/tags/${HEROKU_INTEGRATION_SERVICE_MESH_RELEASE_VERSION}"
fi

# Require jq util
if ! command -v jq > /dev/null; then
    echo " !     jq is not installed!"
    echo " !     Ensure the app is on the latest Heroku stack"
    exit 1
fi

# Setup release vars
RELEASE_JSON=$(curl -s $API_URL)
MESSAGE=$(echo $RELEASE_JSON | jq .message)
if [ ! -z "${MESSAGE}" ] && [ "${MESSAGE}" != "null" ]; then
    echo " !     Unable to download Heroku Integration Service Mesh: ${MESSAGE}"
    exit 1
fi

TAG=$(echo $RELEASE_JSON | jq .tag_name)
DOWNLOAD_URL=$(echo $RELEASE_JSON | jq -r '..| .browser_download_url? // empty')
BINARY_FILE="${BINARY_FILE:-$(echo $DOWNLOAD_URL | rev | cut -d '/' -f 1 | rev | cut -d '.' -f1)}"
VENDOR_DIR="vendor/heroku-integration/bin"
DOWNLOAD_INSTALL_DIR="$BUILD_DIR/$VENDOR_DIR"
mkdir -p $DOWNLOAD_INSTALL_DIR

# Download
echo "-----> Installing version $TAG of Heroku Integration Service Mesh..."
echo "Downloading $BINARY_FILE..." | indent
CURRENT_DIR=`echo $PWD`
cd $DOWNLOAD_INSTALL_DIR && curl -JLs $DOWNLOAD_URL | tar xz
cd $CURRENT_DIR

if [ ! -f "$DOWNLOAD_INSTALL_DIR/$BINARY_FILE" ]; then
    echo " !     Heroku Integration Service Mesh binary not found at $DOWNLOAD_INSTALL_DIR/$BINARY_FILE!"
    exit 1
fi

ln -s "$BINARY_NAME" "$DOWNLOAD_INSTALL_DIR/heroku-applink-service-mesh"

echo "Installing $BINARY_FILE..." | indent
PROFILE_PATH="$BUILD_DIR/.profile.d/$BINARY_FILE.sh"
mkdir -p $(dirname $PROFILE_PATH)
echo 'export PATH="$PATH:'$HOME/$VENDOR_DIR'"' >> $PROFILE_PATH

echo "Done!" | indent
echo "-----> Ensure that $BINARY_FILE is configured in your Procfile's web process to start your app, eg $BINARY_FILE <app startup command>"
